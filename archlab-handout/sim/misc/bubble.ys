# 2100017702 Zimo Meng
# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample
.align 8
Array:
        .quad 0xbca
        .quad 0xcba
        .quad 0xacb
        .quad 0xcab
        .quad 0xabc
        .quad 0xbac

#end
main:
	irmovq Array,%rdi
    irmovq $6,%rsi
	call bubble		# sum(array, 4)
	ret

#long bubble(long * data, long count)
bubble:
    rrmovq %rdi,%rbx # %rbx = data
    rrmovq %rsi,%rdx # %rdx = count
    irmovq $1,%rax # %rax = 1
    subq %rax,%rdx # %rdx = count - 1
    addq %rdx,%rdx 
    addq %rdx,%rdx
    addq %rdx,%rdx # %rdx = 8*(count -1)
    addq %rdx,%rbx # %rbx = last = data + 8 * (count - 1)
test1:
    rrmovq %rbx,%rax
    subq %rdi,%rax
    jle finish # last <= data
loop1_1:
    rrmovq %rdi,%rcx # %rcx = i = data
test2:
    rrmovq %rbx,%rax
    subq %rcx,%rax
    jle loop1_2 # last <= i
loop2:
    rrmovq %rcx,%r8 
    irmovq $8,%r9
    addq %r9,%r8 # %r8 = i + 1
    mrmovq (%r8),%r10 # %r10 = t = * (i + 1)
    mrmovq (%rcx),%r11 # %r11 = *i
    rrmovq %r10,%rax
    subq %r11,%rax
    jge add_1
    rmmovq %r11,(%r8) # *(i + 1) = *i
    rmmovq %r10,(%rcx) # *i = t
add_1:
    irmovq $8,%rax
    addq %rax,%rcx #i++
    jmp test2
loop1_2:
    irmovq $8,%rax
    subq %rax,%rbx
    jmp test1
finish:
    ret
# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
