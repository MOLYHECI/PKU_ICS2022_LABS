#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Zimo Meng 2100017702
#
# Describe how and why you modified the baseline code.
# 采用9路循环展开方法，在循环展开中通过提前读取方法消除数据依赖
# 而对于余数的处理采用三叉树搜索的方法进行跳转，通过将指令后移的方法减少数据依赖带来的影响
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
test10:
	iaddq $-9,%rdx
	jl Root
Loop9:
	mrmovq 64(%rdi),%r9
    mrmovq 56(%rdi),%r8
    rmmovq %r9,64(%rsi)
	andq %r9,%r9
    jle Loop8
    iaddq $1,%rax
Loop8:
	mrmovq 48(%rdi),%r9
    rmmovq %r8,56(%rsi)
	andq %r8,%r8
	jle Loop7
	iaddq $1,%rax
Loop7:
	mrmovq 40(%rdi),%r8
	rmmovq %r9,48(%rsi)
	andq %r9,%r9
	jle Loop6
	iaddq $1,%rax
Loop6:
	mrmovq 32(%rdi),%r9
    rmmovq %r8,40(%rsi)
	andq %r8,%r8
	jle Loop5
	iaddq $1,%rax
Loop5:
	mrmovq 24(%rdi),%r8
    rmmovq %r9,32(%rsi)
	andq %r9,%r9
	jle Loop4
	iaddq $1,%rax
Loop4:
	mrmovq 16(%rdi),%r9
	rmmovq %r8,24(%rsi)
	andq %r8,%r8
	jle Loop3
	iaddq $1,%rax
Loop3:
    mrmovq 8(%rdi),%r8
	rmmovq %r9,16(%rsi)
	andq %r9,%r9
	jle Loop2
	iaddq $1,%rax
Loop2:
	mrmovq (%rdi),%r9
	rmmovq %r8,8(%rsi)
	andq %r8,%r8
	jle Loop1
	iaddq $1,%rax
Loop1:
	rmmovq %r9,(%rsi)
	andq %r9,%r9
	jle Npos
	iaddq $1,%rax
Npos:
	iaddq $72,%rdi
	iaddq $72,%rsi
	iaddq $-9,%rdx
	jge Loop9
Root:
	iaddq $7,%rdx
	jg Right
	jl Left
	je Rest2
Left:
	iaddq $1,%rdx
	je Rest1
	ret
Right:
	iaddq $-3,%rdx
	jg Right2
	jl Right1
	je Rest5
Right1:
	iaddq $1,%rdx
	jl Rest3
	je Rest4
Right2:
	iaddq $-2,%rdx
	je Rest7
	jl Rest6
Rest8:
	mrmovq 56(%rdi),%r8
	rmmovq %r8,56(%rsi)
	andq %r8,%r8
Rest7:	
	mrmovq 48(%rdi),%r9
	jle Rest7_2
	iaddq $1,%rax
Rest7_2:
	rmmovq %r9,48(%rsi)
	andq %r9,%r9
Rest6:
	mrmovq 40(%rdi),%r8
	jle Rest6_2
	iaddq $1,%rax
Rest6_2:
	andq %r8,%r8
	rmmovq %r8,40(%rsi)
Rest5:
	mrmovq 32(%rdi),%r9
	jle Rest5_2
	iaddq $1,%rax
Rest5_2:
	andq %r9,%r9
	rmmovq %r9,32(%rsi)
Rest4:
	mrmovq 24(%rdi),%r8
	jle Rest4_2
	iaddq $1,%rax
Rest4_2:
	andq %r8,%r8
	rmmovq %r8,24(%rsi)
Rest3:
	mrmovq 16(%rdi),%r9
	jle Rest3_2
	iaddq $1,%rax
Rest3_2:
	rmmovq %r9,16(%rsi)
	andq %r9,%r9
Rest2:
	mrmovq 8(%rdi),%r8
	jle Rest2_2
	iaddq $1,%rax
Rest2_2:
	rmmovq %r8,8(%rsi)
	andq %r8,%r8
Rest1:
	mrmovq (%rdi),%r9
	jle Rest1_2
	iaddq $1,%rax
Rest1_2:
	rmmovq %r9,(%rsi)
	andq %r9,%r9
	jle Done
	iaddq $1,%rax
##################################################################
 # Do not modify the following section of code
# src++
# dst++
#len>0?
# if so, goto Loop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad -5
	.quad -6
	.quad -7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad -20
	.quad 21
	.quad 22
	.quad -23
	.quad -24
	.quad -25
	.quad -26
	.quad 27
	.quad -28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad -35
	.quad -36
	.quad -37
	.quad -38
	.quad 39
	.quad -40
	.quad -41
	.quad -42
	.quad 43
	.quad -44
	.quad 45
	.quad -46
	.quad -47
	.quad 48
	.quad -49
	.quad -50
	.quad 51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
